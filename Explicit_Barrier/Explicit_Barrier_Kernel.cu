#include "Explicit_Barrier_Kernel.cuh"

__device__ uint get_smid(void) {
     uint ret;
     asm("mov.u32 %0, %smid;" : "=r"(ret) );
     return ret;
}


#define KERNEL_DDEP(BASE,COM,TYPE,OP)\
	BASE##_KERNEL(COM,TYPE,OP,1)\
	BASE##_KERNEL(COM,TYPE,OP,2)\
	BASE##_KERNEL(COM,TYPE,OP,4)\
	BASE##_KERNEL(COM,TYPE,OP,8)\
	BASE##_KERNEL(COM,TYPE,OP,16)\
	BASE##_KERNEL(COM,TYPE,OP,32)\
	BASE##_KERNEL(COM,TYPE,OP,64)\
	BASE##_KERNEL(COM,TYPE,OP,128)

//warp level
KERNEL_DDEP(BASE,TCOM,float,DULL)
KERNEL_DDEP(BASE,T1COM,float,DULL)
KERNEL_DDEP(BASE,T2COM,float,DULL)
KERNEL_DDEP(BASE,T4COM,float,DULL)
KERNEL_DDEP(BASE,T8COM,float,DULL)
KERNEL_DDEP(BASE,T16COM,float,DULL)
KERNEL_DDEP(BASE,T32COM,float,DULL)

KERNEL_DDEP(BASE,T1SHU,float,EQUAL)
KERNEL_DDEP(BASE,T2SHU,float,EQUAL)
KERNEL_DDEP(BASE,T4SHU,float,EQUAL)
KERNEL_DDEP(BASE,T8SHU,float,EQUAL)
KERNEL_DDEP(BASE,T16SHU,float,EQUAL)
KERNEL_DDEP(BASE,T32SHU,float,EQUAL)

KERNEL_DDEP(COA,CCOM,float,DULL)
KERNEL_DDEP(BASE,CSHU,float,EQUAL)

//block level
KERNEL_DDEP(BASE,BCOM,float,DULL)
//grid level
KERNEL_DDEP(BASE,MGCOM,float,DULL)
KERNEL_DDEP(BASE,GCOM,float,DULL) 

BASE_KERNEL(COM,float,DULL,1)
